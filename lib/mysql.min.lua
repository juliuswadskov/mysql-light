--[[
    - Original https://github.com/brouznouf/fivem-mysql-async/blob/master/lib/MySQL.lua
]]
MySQL={Async={},Sync={}}local function a(b)if nil==b then return{['']=''}end;assert(type(b)=="table","A table is expected")if next(b)==nil then return{['']=''}end;return b end;function MySQL.Sync.execute(c,b)assert(type(c)=="string"or type(c)=="number","The SQL Query must be a string")local d=0;local e=false;exports['mysql-async']:mysql_execute(c,a(b),function(f)d=f;e=true end)repeat Citizen.Wait(0)until e==true;return d end;function MySQL.Sync.fetchAll(c,b)assert(type(c)=="string"or type(c)=="number","The SQL Query must be a string")local d={}local e=false;exports['mysql-async']:mysql_fetch_all(c,a(b),function(f)d=f;e=true end)repeat Citizen.Wait(0)until e==true;return d end;function MySQL.Sync.fetchScalar(c,b)assert(type(c)=="string"or type(c)=="number","The SQL Query must be a string")local d=''local e=false;exports['mysql-async']:mysql_fetch_scalar(c,a(b),function(f)d=f;e=true end)repeat Citizen.Wait(0)until e==true;return d end;function MySQL.Sync.insert(c,b)assert(type(c)=="string"or type(c)=="number","The SQL Query must be a string")local d=0;local e=false;exports['mysql-async']:mysql_insert(c,a(b),function(f)d=f;e=true end)repeat Citizen.Wait(0)until e==true;return d end;function MySQL.Sync.store(c)assert(type(c)=="string","The SQL Query must be a string")local d=-1;local e=false;exports['mysql-async']:mysql_store(c,function(f)d=f;e=true end)repeat Citizen.Wait(0)until e==true;return d end;function MySQL.Sync.transaction(g,b)local d=0;local e=false;exports['mysql-async']:mysql_transaction(g,b,function(f)d=f;e=true end)repeat Citizen.Wait(0)until e==true;return d end;function MySQL.Async.execute(c,b,h)assert(type(c)=="string"or type(c)=="number","The SQL Query must be a string")exports['mysql-async']:mysql_execute(c,a(b),h)end;function MySQL.Async.fetchAll(c,b,h)assert(type(c)=="string"or type(c)=="number","The SQL Query must be a string")exports['mysql-async']:mysql_fetch_all(c,a(b),h)end;function MySQL.Async.fetchScalar(c,b,h)assert(type(c)=="string"or type(c)=="number","The SQL Query must be a string")exports['mysql-async']:mysql_fetch_scalar(c,a(b),h)end;function MySQL.Async.insert(c,b,h)assert(type(c)=="string"or type(c)=="number","The SQL Query must be a string")exports['mysql-async']:mysql_insert(c,a(b),h)end;function MySQL.Async.store(c,h)assert(type(c)=="string","The SQL Query must be a string")exports['mysql-async']:mysql_store(c,h)end;function MySQL.Async.transaction(g,b,h)return exports['mysql-async']:mysql_transaction(g,b,h)end;function MySQL.ready(i)Citizen.CreateThread(function()while GetResourceState('mysql-async')~='started'do Citizen.Wait(0)end;while not exports['mysql-async']:is_ready()do Citizen.Wait(0)end;i()end)end